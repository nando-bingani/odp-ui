{% macro render_form(
    form,
    obj,
    col2_fields,
    file_upload=false
) %}
    {# Render a form and populate fields from obj, if provided.
        To override the default submit target, pass submit_target=url.
        To override the default cancel target, pass cancel_target=url.
    #}
    {% set submit_target = kwargs.get('submit_target') or
        (url_for('.edit', id=obj.id) if obj else url_for('.create'))
    %}
    {% set cancel_target = kwargs.get('cancel_target') or
        (url_for('.detail', id=obj.id) if obj else url_for('.index'))
    %}
    <form action="{{ submit_target }}" method="post"
        {% if file_upload %}
            enctype="multipart/form-data"
        {% endif %}>
        {{ form.csrf_token }}
        <div class="row">
            <div class="col-5">
                {% for field in form if field.id != 'csrf_token' and field.id not in col2_fields %}
                    {{ render_field(field, obj) }}
                {% endfor %}
            </div>
            <div class="col-7">
                {% for field in form if field.id in col2_fields %}
                    {{ render_field(field, obj) }}
                {% endfor %}
            </div>
        </div>
        <div class="mt-4">
            <button type="submit" class="btn btn-outline-primary btn-action">
                Save
            </button>
            <a href="{{ cancel_target }}" class="btn btn-outline-secondary btn-action">
                Cancel
            </a>
        </div>
    </form>
{% endmacro %}


{% macro render_field(
    field,
    obj
) %}
    <div class="mt-4">
        {{ field.label(class='form-label') }}
        {% if field.flags.required %}
            <span class="text-danger"> *</span>
        {% endif %}

        {% if obj and field.id == 'id' %}
            {{ field(class='form-control', readonly='') }}

        {% elif field.type == 'BooleanField' %}
            <div class="form-check">
                {{ field(class='form-check-input', **kwargs) }}
            </div>

        {% else %}
            {% set classes = ['form-control'] %}
            {% if field.type == 'JSONTextField' %}
                {% set classes = classes + ['font-monospace'] %}
            {% elif field.type == 'RadioField' %}
                {% set classes = classes + ['list-unstyled'] %}
            {% elif field.type == 'MultiCheckboxField' %}
                {% set classes = classes + ['list-unstyled'] %}
            {% endif %}
            {% if field.errors %}
                {% set classes = classes + ['is-invalid'] %}
            {% endif %}

            {% if field.type == 'MultiCheckboxField' %}
                {% set style = kwargs.pop('style', '') %}
                <div class="overflow-auto" style="{{ style }}">
                    {{ field(class=classes|join(' '), **kwargs) }}
                </div>
            {% else %}
                {{ field(class=classes|join(' '), spellcheck='false', **kwargs) }}
            {% endif %}
        {% endif %}

        {% if field.description %}
            <div id="{{ field.id }}-description" class="form-text">{{ field.description }}</div>
        {% endif %}

        {% for error in field.errors %}
            <div class="invalid-feedback">
                {{ error }}
            </div>
        {% endfor %}
    </div>
{% endmacro %}


{% macro render_delete_button_form(
    target,
    item_desc,
    enabled=true,
    confirm_msg=none
) %}
    {# Render a table row delete button (small red X).
        Use kwargs to pass params to the target view function.
    #}
    {% set msg = confirm_msg or 'Are you sure you want to delete this %s?' % item_desc %}
    <form action="{{ url_for(target, **kwargs) }}" method="post">
        <button type="submit" class="btn btn-outline-danger btn-icon" {{ 'disabled' if not enabled }}
                onclick="return confirm('{{ msg }}')">
            {{ '&#10060;'|safe }}
        </button>
    </form>
{% endmacro %}


{% macro render_button_dialog_form(
    button,
    form,
    modal_id,
    edit_icon=false,
    file_upload=false,
    reload_on_cancel=false
) %}
    {# Render a Button instance that pops up a modal form dialog.
        Optionally override default field rendering by using a callback.
        Set edit_icon=true to render a small generic edit button.
        Set reload_on_cancel=true to force a page reload when the modal
        is cancelled. This is the simplest way to ensure that form values
        are reset.
    #}
    {% set disabled = button.scope and button.scope not in g.user_permissions %}
    {% set btn_class = 'btn btn-' + ('outline-' if button.outline) + button.theme.value %}
    {% if edit_icon %}
        {% set btn_class = btn_class + ' btn-icon' %}
        {% set btn_label = '&#128393;' | safe %}
    {% else %}
        {% set btn_class = btn_class + ' btn-action' %}
        {% set btn_label = button.label %}
    {% endif %}

    <button type="button" class="{{ btn_class }}" {{ 'disabled' if disabled }}
            onclick="showModal('{{ modal_id }}', {{ reload_on_cancel | lower }});"
            {% if button.description %}title="{{ button.description }}"{% endif %}>
        {{ btn_label }}
    </button>

    <div class="modal fade" id="{{ modal_id }}" tabindex="-1" data-bs-backdrop="static">
        <div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5">{{ button.label }}</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                    {% if button.description %}
                        <span>{{ button.description }}</span>
                    {% endif %}
                    <form id="{{ modal_id }}-form" action="{{ url_for(button.endpoint, id=button.object_id) }}" method="post"
                        {% if file_upload %}
                            enctype="multipart/form-data"
                        {% endif %}>
                        {{ form.csrf_token }}
                        {% if caller %}
                            {{ caller() }}
                        {% else %}
                            {% for field in form if field.id != 'csrf_token' %}
                                {{ render_field(field) }}
                            {% endfor %}
                        {% endif %}
                    </form>
                </div>

                <div class="modal-footer">
                    <button type="submit" form="{{ modal_id }}-form" class="btn btn-outline-primary btn-action">
                        Save
                    </button>
                    <button type="button" class="btn btn-outline-secondary btn-action" data-bs-dismiss="modal">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
{% endmacro %}
