{% from 'controls.j2' import pagination %}
{% from 'forms.j2' import render_delete_button_form %}


{% macro render_table(result) %}
    {# Render a paginated list result in a table.
        Column titles can be passed in via columns=[...] or varargs.
        To disable automatic id column rendering, pass hide_id=true.
        For custom pagination text color, pass e.g. pag_text_color='light'.
        Additional query params to append to paging URLs can be passed in via query='&...' or kwargs.
        query should be used when values are repeatable, e.g. query='&collection=CSAG&collection=DFFE'
        Example usage:
            {% call(catalog) render_table(catalogs, 'URL', 'Published records') %}
                <td>{{ catalog.url }}</td>
                <td>{{ catalog.record_count }}</td>
            {% endcall %}
    #}
    {% set columns = kwargs.pop('columns', none) or varargs %}
    {% set hide_id = kwargs.pop('hide_id', false) %}
    {% set pag_text_color = kwargs.pop('pag_text_color', false) %}
    {% set query = kwargs.pop('query', '') %}

    {% set pagination %}
        <div class="mt-4 mx-2">
            {{ pagination(
                result.page,
                result.pages,
                result.total,
                query=query,
                text_color=pag_text_color,
                **kwargs
            ) }}
        </div>
    {% endset %}

    {% if result.pages > 1 %}
        {{ pagination }}
    {% endif %}

    <table class="table table-hover bg-white mt-2">
        <thead>
            <tr>
                {% if not hide_id %}
                    <th scope="col">Id</th>
                {% endif %}
                {% for col in columns %}
                    <th scope="col">{{ col }}</th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% for obj in result['items'] %}
                <tr>
                    {% if not hide_id %}
                        <th scope="row">{{ obj_link('', obj.id) }}</th>
                    {% endif %}
                    {% if caller %}
                        {{ caller(obj) }}
                    {% endif %}
                </tr>
            {% endfor %}
        </tbody>
    </table>

    {{ pagination }}

{% endmacro %}


{% macro render_tag_table(obj, tags, tag_view, untag_view, enable_buttons) %}
    {# Render a paginated list of tag instances for a record or collection.
        Use kwargs to specify field='Column heading' pairs.
        Example usage:
            {{ render_tag_table(collection, project_tags, '.tag_project', '.untag_project', project_tag_enabled,
               project='Project', comment='Comment') }}
    #}
    {% set cols = kwargs.values()|list + ['User', 'Timestamp', ''] %}
    {% set fields = kwargs.keys() %}
    {% call(tag_instance) render_table(tags, columns=cols, hide_id=True) %}
        {% for field in fields %}
            <td>{{ tag_instance.data[field] }}</td>
        {% endfor %}
        <td>{{ obj_link('users', tag_instance.user_id, tag_instance.user_name) }}</td>
        <td>{{ tag_instance.timestamp|timestamp }}</td>
        <td class="text-end">
            {{ render_delete_button_form(untag_view, 'tag', enable_buttons, id=obj.id, tag_instance_id=tag_instance.id) }}
        </td>
    {% endcall %}
    <div class="btn-toolbar justify-content-between mt-4">
        <a href="{{ url_for(tag_view, id=obj.id) }}" class="btn btn-outline-success btn-action {{ 'disabled' if not enable_buttons }}">
            Tag
        </a>
    </div>
{% endmacro %}


{% macro render_audit_table(audit_records) %}
    {# Render a paginated list of audit records.
        The callback is for filling in the content of the 'Detail' column for a given audit_record.
    #}
    {% set orig_caller = caller %}
    {% call(audit_record) render_table(audit_records, 'Table', 'Command', 'Detail', 'User', 'Client', 'Timestamp', hide_id=True) %}
        <td>{{ audit_record.table }}</td>
        <td>{{ audit_record.command }}</td>
        <td>
            {{ orig_caller(audit_record) }}
        </td>
        <td>{{ obj_link('users', audit_record.user_id, audit_record.user_name) }}</td>
        <td>{{ obj_link('clients', audit_record.client_id) }}</td>
        <td>{{ audit_record.timestamp|timestamp }}</td>
    {% endcall %}
{% endmacro %}


{% macro render_button(button, edit_icon=false) %}
    {# Render a Button object.
        Set edit_icon=true to render a small generic edit button.
    #}
    {% set disabled = button.scope and button.scope not in g.user_permissions %}
    {% set btn_class = 'btn btn-' + ('outline-' if button.outline) + button.theme.value %}
    {% if edit_icon %}
        {% set btn_class = btn_class + ' btn-icon' %}
        {% set btn_label = '&#128393;' | safe %}
    {% else %}
        {% set btn_class = btn_class + ' btn-action' %}
        {% set btn_label = button.label %}
    {% endif %}

    {% if button.prompt %}
        <form action="{{ url_for(button.endpoint, id=button.object_id) }}" method="post">
            <button type="submit" class="{{ btn_class }}" {{ 'disabled' if disabled }}
                    onclick="return confirm('{{ button.prompt % button.prompt_args }}')"
                    {% if button.description %}title="{{ button.description }}{% endif %}">
                {{ btn_label }}
            </button>
        </form>
    {% else %}
        <a href="{{ url_for(button.endpoint, id=button.object_id) }}"
           class="{{ btn_class }} {{ 'disabled' if disabled }}">
            {{ btn_label }}
        </a>
    {% endif %}
{% endmacro %}


{% macro render_buttons(buttons) %}
    {# Render a row of buttons.
        Each array item may be a Button object, or a string for custom rendering
        via a callback.
    #}
    <div class="btn-toolbar justify-content-between mt-4">
        {% for button in buttons %}
            {% if button is string %}
                {{ caller(button) }}
            {% else %}
                {{ render_button(button) }}
            {% endif %}
        {% endfor %}
    </div>
{% endmacro %}


{% macro render_info(obj) %}
    {# Render object info in a table.
        Property labels can be passed in via kwarg properties=[...] or via varargs.
        To disable automatic id field rendering, pass kwarg hide_id=True.
        Example usage:
        {% call(prop) render_info(collection, 'Name', 'Provider') %}
            {% if prop == 'Name' %}
                {{ collection.name }}
            {% elif prop == 'Provider' %}
                {{ obj_link('providers', collection.provider_id, collection.provider_key) }}
            {% endif %}
        {% endcall %}
    #}
    <table class="table">
        <tbody>
            {% if not kwargs.get('hide_id') %}
                <tr>
                    <th scope="row">Id</th>
                    <td>{{ obj.id }}</td>
                </tr>
            {% endif %}
            {% for prop in kwargs.get('properties') or varargs %}
                <tr>
                    <th scope="row">{{ prop }}</th>
                    <td>{{ caller(prop) }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
{% endmacro %}


{% macro obj_link(view, obj_id, display_text=None) %}
    {% if obj_id %}
        {% set target = url_for(view ~ '.detail', id=obj_id) %}
        <a href="{{ target }}" class="text-decoration-none">
            {{ display_text if display_text is not none else obj_id -}}
        </a>
    {%- endif %}
{%- endmacro %}


{% macro obj_links(view, obj_ids, newlines=False) %}
    {# Render a list of object links.
        obj_ids may be a flat list of ids, or a mapping of ids to display values.
    #}
    {% if newlines %}
        {% set sep = '<br/>' | safe %}
    {% else %}
        {% set sep = ', ' %}
    {% endif %}
    {% if obj_ids is mapping %}
        {% for obj_id, value in obj_ids | dictsort %}
            {{ obj_link(view, obj_id, value) }}{% if not loop.last %}{{ sep }}{% endif %}
        {% endfor %}
    {% else %}
        {% for obj_id in obj_ids | sort %}
            {{ obj_link(view, obj_id) }}{% if not loop.last %}{{ sep }}{% endif %}
        {% endfor %}
    {% endif %}
{% endmacro %}


{% macro obj_info_popup(obj_id, link_text, title_text) %}
    {# Render object info in a modal dialog.
        Pass property names via varargs; callback rendering as for render_info.
        Use callback prop 'footer' to insert content before the close button.
    #}
    <a href="#" class="text-decoration-none" data-bs-toggle="modal" data-bs-target="#modal-{{ obj_id }}">
        {{ link_text }}
    </a>

    <div class="modal fade" id="modal-{{ obj_id }}" tabindex="-1">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5">{{ title_text }}</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <div class="modal-body">
                    <table class="table">
                        <tbody>
                            {% for prop in varargs %}
                                <tr>
                                    <th scope="row">{{ prop }}</th>
                                    <td>{{ caller(prop) }}</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>

                <div class="modal-footer">
                    {{ caller('footer') }}
                    <button type="button" class="btn btn-outline-secondary btn-action" data-bs-dismiss="modal">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
{% endmacro %}
